{
  "manifest": {
    "model_uri": "models:/AutoML_Wine_2023_05_21/production",
    "source": "databricks://e2_demo",
    "model_uris": {
      "model_uri": "models:/AutoML_Wine_2023_05_21/production",
      "run_uri": "runs:/5249e62f29a244ecb86126951ab1db99/model",
      "reg_model_download_uri": "dbfs:/databricks/mlflow-registry/54c5eca441e2494bbe5284ec12202d3a/models/model",
      "run_model_download_uri": "dbfs:/databricks/mlflow-tracking/536189130327910/5249e62f29a244ecb86126951ab1db99/artifacts/model"
    },
    "mlflow_version": "2.4.1",
    "timestamp": "2023-07-06 04:02:16"
  },
  "mlflow_model": {
    "artifact_path": "model",
    "flavors": {
      "python_function": {
        "env": {
          "conda": "conda.yaml",
          "virtualenv": "python_env.yaml"
        },
        "loader_module": "mlflow.sklearn",
        "model_path": "model.pkl",
        "predict_fn": "predict",
        "python_version": "3.10.6"
      },
      "sklearn": {
        "code": null,
        "pickled_model": "model.pkl",
        "serialization_format": "cloudpickle",
        "sklearn_version": "1.1.1"
      }
    },
    "mlflow_version": "2.3.1",
    "model_uuid": "c04504c9820642b0bec2cdc5bb4728bd",
    "run_id": "5249e62f29a244ecb86126951ab1db99",
    "saved_input_example_info": {
      "artifact_path": "input_example.json",
      "pandas_orient": "split",
      "type": "dataframe"
    },
    "signature": {
      "inputs": [
        {
          "name": "fixed acidity",
          "type": "double"
        },
        {
          "name": "volatile acidity",
          "type": "double"
        },
        {
          "name": "citric acid",
          "type": "double"
        },
        {
          "name": "residual sugar",
          "type": "double"
        },
        {
          "name": "chlorides",
          "type": "double"
        },
        {
          "name": "free sulfur dioxide",
          "type": "double"
        },
        {
          "name": "total sulfur dioxide",
          "type": "double"
        },
        {
          "name": "density",
          "type": "double"
        },
        {
          "name": "pH",
          "type": "double"
        },
        {
          "name": "sulphates",
          "type": "double"
        },
        {
          "name": "alcohol",
          "type": "double"
        }
      ],
      "outputs": [
        {
          "type": "tensor",
          "tensor-spec": {
            "dtype": "float64",
            "shape": [
              -1
            ]
          }
        }
      ]
    },
    "utc_time_created": "2023-05-21 18:38:57.262370"
  },
  "run": {
    "info": {
      "run_id": "5249e62f29a244ecb86126951ab1db99",
      "run_uuid": "5249e62f29a244ecb86126951ab1db99",
      "experiment_id": 536189130327910,
      "run_name": "legendary-ray-459",
      "status": "FINISHED",
      "start_time": 1684694336103,
      "end_time": 1684694344038,
      "artifact_uri": "dbfs:/databricks/mlflow-tracking/536189130327910/5249e62f29a244ecb86126951ab1db99/artifacts",
      "lifecycle_stage": "active",
      "_start_time": "2023-05-21 18:38:56",
      "_end_time": "2023-05-21 18:39:04",
      "_duration": 7.935,
      "_experiment_name": "/Users/andre@mycompany.com/experiments/automl/AutoML_Wine_2023_05_21_a",
      "_web_ui_link": "https://e2-demo-west.cloud.databricks.com#mlflow/experiments/536189130327910/runs/5249e62f29a244ecb86126951ab1db99",
      "_api_link": "https://e2-demo-west.cloud.databricks.com/api/2.0/mlflow/runs/get?run_id=5249e62f29a244ecb86126951ab1db99"
    },
    "data": {
      "metrics": [
        {
          "key": "test_example_count",
          "value": 996.0,
          "timestamp": 1684694343959,
          "step": 0
        },
        {
          "key": "test_max_error",
          "value": 3.074402894637739,
          "timestamp": 1684694343959,
          "step": 0
        },
        {
          "key": "test_mean_absolute_error",
          "value": 0.5134546573457012,
          "timestamp": 1684694343959,
          "step": 0
        },
        {
          "key": "test_mean_absolute_percentage_error",
          "value": 0.09059602865307287,
          "timestamp": 1684694343959,
          "step": 0
        },
        {
          "key": "test_mean_on_target",
          "value": 5.899598393574297,
          "timestamp": 1684694343959,
          "step": 0
        },
        {
          "key": "test_mean_squared_error",
          "value": 0.43817150609937155,
          "timestamp": 1684694343959,
          "step": 0
        },
        {
          "key": "test_r2_score",
          "value": 0.4390214018818217,
          "timestamp": 1684694343959,
          "step": 0
        },
        {
          "key": "test_root_mean_squared_error",
          "value": 0.6619452440341056,
          "timestamp": 1684694343959,
          "step": 0
        },
        {
          "key": "test_score",
          "value": 0.4390214018818217,
          "timestamp": 1684694343959,
          "step": 0
        },
        {
          "key": "test_sum_on_target",
          "value": 5876.0,
          "timestamp": 1684694343959,
          "step": 0
        },
        {
          "key": "training_example_count",
          "value": 2937.0,
          "timestamp": 1684694343421,
          "step": 0
        },
        {
          "key": "training_max_error",
          "value": 3.396381889882912,
          "timestamp": 1684694343421,
          "step": 0
        },
        {
          "key": "training_mean_absolute_error",
          "value": 0.47978896802293824,
          "timestamp": 1684694343421,
          "step": 0
        },
        {
          "key": "training_mean_absolute_percentage_error",
          "value": 0.08489937476073763,
          "timestamp": 1684694343421,
          "step": 0
        },
        {
          "key": "training_mean_on_target",
          "value": 5.865509022812393,
          "timestamp": 1684694343421,
          "step": 0
        },
        {
          "key": "training_mean_squared_error",
          "value": 0.39236534342405316,
          "timestamp": 1684694343421,
          "step": 0
        },
        {
          "key": "training_r2_score",
          "value": 0.5079257048031887,
          "timestamp": 1684694343421,
          "step": 0
        },
        {
          "key": "training_root_mean_squared_error",
          "value": 0.6263907274409904,
          "timestamp": 1684694343421,
          "step": 0
        },
        {
          "key": "training_score",
          "value": 0.5079257048031887,
          "timestamp": 1684694343421,
          "step": 0
        },
        {
          "key": "training_sum_on_target",
          "value": 17227.0,
          "timestamp": 1684694343421,
          "step": 0
        },
        {
          "key": "val_example_count",
          "value": 920.0,
          "timestamp": 1684694343683,
          "step": 0
        },
        {
          "key": "val_max_error",
          "value": 3.045958339807912,
          "timestamp": 1684694343683,
          "step": 0
        },
        {
          "key": "val_mean_absolute_error",
          "value": 0.5394772338588673,
          "timestamp": 1684694343683,
          "step": 0
        },
        {
          "key": "val_mean_absolute_percentage_error",
          "value": 0.09395823663026384,
          "timestamp": 1684694343683,
          "step": 0
        },
        {
          "key": "val_mean_on_target",
          "value": 5.890217391304348,
          "timestamp": 1684694343683,
          "step": 0
        },
        {
          "key": "val_mean_squared_error",
          "value": 0.4867401457148646,
          "timestamp": 1684694343683,
          "step": 0
        },
        {
          "key": "val_r2_score",
          "value": 0.3490432462871078,
          "timestamp": 1684694343683,
          "step": 0
        },
        {
          "key": "val_root_mean_squared_error",
          "value": 0.6976676470317831,
          "timestamp": 1684694343683,
          "step": 0
        },
        {
          "key": "val_score",
          "value": 0.3490432462871078,
          "timestamp": 1684694343683,
          "step": 0
        },
        {
          "key": "val_sum_on_target",
          "value": 5419.0,
          "timestamp": 1684694343683,
          "step": 0
        }
      ],
      "params": [
        {
          "key": "column_selector",
          "value": "ColumnSelector(cols=['alcohol', 'density', 'fixed acidity', 'residual sugar',\n                     'sulphates', 'volatile acidity', 'citric acid',\n                     'free sulfur dioxide', 'pH', 'chlorides',\n                     'total sulfur dioxide'])"
        },
        {
          "key": "column_selector__cols",
          "value": "['alcohol', 'density', 'fixed acidity', 'residual sugar', 'sulphates', 'volatile acidity', 'citric acid', 'free sulfur dioxide', 'pH', 'chlorides', 'total sulfur dioxide']"
        },
        {
          "key": "memory",
          "value": "None"
        },
        {
          "key": "preprocessor",
          "value": "ColumnTransformer(remainder='passthrough', sparse_threshold=0,\n                  transformers=[('numerical',\n                                 Pipeline(steps=[('converter',\n                                                  FunctionTransformer(func=<function <lambda> at 0x7f3779c3dab0>)),\n                                                 ('imputers',\n                                                  ColumnTransformer(transformers=[('impute_mean',\n                                                 ..."
        },
        {
          "key": "preprocessor__n_jobs",
          "value": "None"
        },
        {
          "key": "preprocessor__numerical",
          "value": "Pipeline(steps=[('converter',\n                 FunctionTransformer(func=<function <lambda> at 0x7f3779c3dab0>)),\n                ('imputers',\n                 ColumnTransformer(transformers=[('impute_mean',\n                                                  SimpleImputer(),\n                                                  ['alcohol', 'chlorides',\n                                                   'citric acid', 'density',\n                                                   'fixed acidity',\n   ..."
        },
        {
          "key": "preprocessor__numerical__converter",
          "value": "FunctionTransformer(func=<function <lambda> at 0x7f3779c3dab0>)"
        },
        {
          "key": "preprocessor__numerical__converter__accept_sparse",
          "value": "False"
        },
        {
          "key": "preprocessor__numerical__converter__check_inverse",
          "value": "True"
        },
        {
          "key": "preprocessor__numerical__converter__feature_names_out",
          "value": "None"
        },
        {
          "key": "preprocessor__numerical__converter__func",
          "value": "<function <lambda> at 0x7f3779c3dab0>"
        },
        {
          "key": "preprocessor__numerical__converter__inv_kw_args",
          "value": "None"
        },
        {
          "key": "preprocessor__numerical__converter__inverse_func",
          "value": "None"
        },
        {
          "key": "preprocessor__numerical__converter__kw_args",
          "value": "None"
        },
        {
          "key": "preprocessor__numerical__converter__validate",
          "value": "False"
        },
        {
          "key": "preprocessor__numerical__imputers",
          "value": "ColumnTransformer(transformers=[('impute_mean', SimpleImputer(),\n                                 ['alcohol', 'chlorides', 'citric acid',\n                                  'density', 'fixed acidity',\n                                  'free sulfur dioxide', 'pH', 'residual sugar',\n                                  'sulphates', 'total sulfur dioxide',\n                                  'volatile acidity'])])"
        },
        {
          "key": "preprocessor__numerical__imputers__impute_mean",
          "value": "SimpleImputer()"
        },
        {
          "key": "preprocessor__numerical__imputers__impute_mean__add_indicator",
          "value": "False"
        },
        {
          "key": "preprocessor__numerical__imputers__impute_mean__copy",
          "value": "True"
        },
        {
          "key": "preprocessor__numerical__imputers__impute_mean__fill_value",
          "value": "None"
        },
        {
          "key": "preprocessor__numerical__imputers__impute_mean__missing_values",
          "value": "nan"
        },
        {
          "key": "preprocessor__numerical__imputers__impute_mean__strategy",
          "value": "mean"
        },
        {
          "key": "preprocessor__numerical__imputers__impute_mean__verbose",
          "value": "deprecated"
        },
        {
          "key": "preprocessor__numerical__imputers__n_jobs",
          "value": "None"
        },
        {
          "key": "preprocessor__numerical__imputers__remainder",
          "value": "drop"
        },
        {
          "key": "preprocessor__numerical__imputers__sparse_threshold",
          "value": 0.3
        },
        {
          "key": "preprocessor__numerical__imputers__transformer_weights",
          "value": "None"
        },
        {
          "key": "preprocessor__numerical__imputers__transformers",
          "value": "[('impute_mean', SimpleImputer(), ['alcohol', 'chlorides', 'citric acid', 'density', 'fixed acidity', 'free sulfur dioxide', 'pH', 'residual sugar', 'sulphates', 'total sulfur dioxide', 'volatile acidity'])]"
        },
        {
          "key": "preprocessor__numerical__imputers__verbose",
          "value": "False"
        },
        {
          "key": "preprocessor__numerical__imputers__verbose_feature_names_out",
          "value": "True"
        },
        {
          "key": "preprocessor__numerical__memory",
          "value": "None"
        },
        {
          "key": "preprocessor__numerical__standardizer",
          "value": "StandardScaler()"
        },
        {
          "key": "preprocessor__numerical__standardizer__copy",
          "value": "True"
        },
        {
          "key": "preprocessor__numerical__standardizer__with_mean",
          "value": "True"
        },
        {
          "key": "preprocessor__numerical__standardizer__with_std",
          "value": "True"
        },
        {
          "key": "preprocessor__numerical__steps",
          "value": "[('converter', FunctionTransformer(func=<function <lambda> at 0x7f3779c3dab0>)), ('imputers', ColumnTransformer(transformers=[('impute_mean', SimpleImputer(),\n                                 ['alcohol', 'chlorides', 'citric acid',\n                                  'density', 'fixed acidity',\n                                  'free sulfur dioxide', 'pH', 'residual sugar',\n                                  'sulphates', 'total sulfur dioxide',\n                                  'volatile acidity..."
        },
        {
          "key": "preprocessor__numerical__verbose",
          "value": "False"
        },
        {
          "key": "preprocessor__remainder",
          "value": "passthrough"
        },
        {
          "key": "preprocessor__sparse_threshold",
          "value": 0
        },
        {
          "key": "preprocessor__transformer_weights",
          "value": "None"
        },
        {
          "key": "preprocessor__transformers",
          "value": "[('numerical', Pipeline(steps=[('converter',\n                 FunctionTransformer(func=<function <lambda> at 0x7f3779c3dab0>)),\n                ('imputers',\n                 ColumnTransformer(transformers=[('impute_mean',\n                                                  SimpleImputer(),\n                                                  ['alcohol', 'chlorides',\n                                                   'citric acid', 'density',\n                                                   'fixe..."
        },
        {
          "key": "preprocessor__verbose",
          "value": "False"
        },
        {
          "key": "preprocessor__verbose_feature_names_out",
          "value": "True"
        },
        {
          "key": "regressor",
          "value": "LGBMRegressor(colsample_bytree=0.7777905133862134, lambda_l1=2.610389982397478,\n              lambda_l2=0.9298812609436371, learning_rate=0.27177322704504847,\n              max_bin=170, max_depth=11, min_child_samples=116, n_estimators=24,\n              num_leaves=158, random_state=835198998,\n              subsample=0.7160184639493279)"
        },
        {
          "key": "regressor__boosting_type",
          "value": "gbdt"
        },
        {
          "key": "regressor__class_weight",
          "value": "None"
        },
        {
          "key": "regressor__colsample_bytree",
          "value": 0.7777905133862134
        },
        {
          "key": "regressor__importance_type",
          "value": "split"
        },
        {
          "key": "regressor__lambda_l1",
          "value": 2.610389982397478
        },
        {
          "key": "regressor__lambda_l2",
          "value": 0.9298812609436371
        },
        {
          "key": "regressor__learning_rate",
          "value": 0.27177322704504847
        },
        {
          "key": "regressor__max_bin",
          "value": 170
        },
        {
          "key": "regressor__max_depth",
          "value": 11
        },
        {
          "key": "regressor__min_child_samples",
          "value": 116
        },
        {
          "key": "regressor__min_child_weight",
          "value": 0.001
        },
        {
          "key": "regressor__min_split_gain",
          "value": 0.0
        },
        {
          "key": "regressor__n_estimators",
          "value": 24
        },
        {
          "key": "regressor__n_jobs",
          "value": -1
        },
        {
          "key": "regressor__num_leaves",
          "value": 158
        },
        {
          "key": "regressor__objective",
          "value": "None"
        },
        {
          "key": "regressor__random_state",
          "value": 835198998
        },
        {
          "key": "regressor__reg_alpha",
          "value": 0.0
        },
        {
          "key": "regressor__reg_lambda",
          "value": 0.0
        },
        {
          "key": "regressor__silent",
          "value": "warn"
        },
        {
          "key": "regressor__subsample",
          "value": 0.7160184639493279
        },
        {
          "key": "regressor__subsample_for_bin",
          "value": 200000
        },
        {
          "key": "regressor__subsample_freq",
          "value": 0
        },
        {
          "key": "steps",
          "value": "[('column_selector', ColumnSelector(cols=['alcohol', 'density', 'fixed acidity', 'residual sugar',\n                     'sulphates', 'volatile acidity', 'citric acid',\n                     'free sulfur dioxide', 'pH', 'chlorides',\n                     'total sulfur dioxide'])), ('preprocessor', ColumnTransformer(remainder='passthrough', sparse_threshold=0,\n                  transformers=[('numerical',\n                                 Pipeline(steps=[('converter',\n                             ..."
        },
        {
          "key": "verbose",
          "value": "False"
        }
      ],
      "tags": {
        "estimator_class": "sklearn.pipeline.Pipeline",
        "estimator_name": "Pipeline",
        "mlflow.databricks.notebookID": 536189130328609,
        "mlflow.datasets": [
          {
            "name": "527bce1909134eed0d0b93e60603cd77",
            "hash": "527bce1909134eed0d0b93e60603cd77",
            "model": "31e23e54e5bb4ddd8d1ddf5da55ddecb"
          },
          {
            "name": "435c410d4f55bbcec3ebe66e02487765",
            "hash": "435c410d4f55bbcec3ebe66e02487765",
            "model": "31e23e54e5bb4ddd8d1ddf5da55ddecb"
          },
          {
            "name": "69270c4dfa097d87466461501c0b8322",
            "hash": "69270c4dfa097d87466461501c0b8322",
            "model": "31e23e54e5bb4ddd8d1ddf5da55ddecb"
          }
        ],
        "mlflow.log-model.history": [
          {
            "artifact_path": "model",
            "saved_input_example_info": {
              "artifact_path": "input_example.json",
              "type": "dataframe",
              "pandas_orient": "split"
            },
            "signature": {
              "inputs": [
                {
                  "name": "fixed acidity",
                  "type": "double"
                },
                {
                  "name": "volatile acidity",
                  "type": "double"
                },
                {
                  "name": "citric acid",
                  "type": "double"
                },
                {
                  "name": "residual sugar",
                  "type": "double"
                },
                {
                  "name": "chlorides",
                  "type": "double"
                },
                {
                  "name": "free sulfur dioxide",
                  "type": "double"
                },
                {
                  "name": "total sulfur dioxide",
                  "type": "double"
                },
                {
                  "name": "density",
                  "type": "double"
                },
                {
                  "name": "pH",
                  "type": "double"
                },
                {
                  "name": "sulphates",
                  "type": "double"
                },
                {
                  "name": "alcohol",
                  "type": "double"
                }
              ],
              "outputs": [
                {
                  "type": "tensor",
                  "tensor-spec": {
                    "dtype": "float64",
                    "shape": [
                      -1
                    ]
                  }
                }
              ]
            },
            "flavors": {
              "python_function": {
                "predict_fn": "predict",
                "model_path": "model.pkl",
                "loader_module": "mlflow.sklearn",
                "env": {
                  "conda": "conda.yaml",
                  "virtualenv": "python_env.yaml"
                },
                "python_version": "3.10.6"
              },
              "sklearn": {
                "pickled_model": "model.pkl",
                "sklearn_version": "1.1.1",
                "serialization_format": "cloudpickle",
                "code": null
              }
            },
            "run_id": "5249e62f29a244ecb86126951ab1db99",
            "model_uuid": "c04504c9820642b0bec2cdc5bb4728bd",
            "utc_time_created": "2023-05-21 18:38:57.262370",
            "mlflow_version": "2.3.1"
          }
        ],
        "mlflow.runName": "legendary-ray-459",
        "mlflow.source.name": "Notebook: LightGBMRegressor",
        "mlflow.source.type": "NOTEBOOK",
        "mlflow.user": "andre@mycompany.com",
        "model_type": "lightgbm_regressor"
      }
    },
    "inputs": {}
  },
  "experiment": {
    "experiment_id": 536189130327910,
    "name": "/Users/andre@mycompany.com/experiments/automl/AutoML_Wine_2023_05_21_a",
    "artifact_location": "dbfs:/databricks/mlflow-tracking/536189130327910",
    "lifecycle_stage": "active",
    "last_update_time": 1684694380002,
    "creation_time": 1684694060380,
    "tags": {
      "_databricks_automl": "True",
      "_databricks_automl.alerts.high_correlation_cols": {
        "version": 1,
        "severity": "low",
        "affected": {
          "values": [
            {
              "id": "alcohol",
              "type": null
            },
            {
              "id": "chlorides",
              "type": null
            },
            {
              "id": "density",
              "type": null
            },
            {
              "id": "free sulfur dioxide",
              "type": null
            },
            {
              "id": "residual sugar",
              "type": null
            }
          ],
          "others": 1
        }
      },
      "_databricks_automl.best_trial_notebook_id": 536189130328609,
      "_databricks_automl.compute_mode": "CLASSIC",
      "_databricks_automl.data_dir": "None",
      "_databricks_automl.end_time": 1684694380,
      "_databricks_automl.evaluation_metric": "val_root_mean_squared_error",
      "_databricks_automl.evaluation_metric_order_by_asc": "True",
      "_databricks_automl.exploration_notebook_id": 536189130327927,
      "_databricks_automl.job_run_id": 196379917,
      "_databricks_automl.max_trials": 10000,
      "_databricks_automl.problem_type": "regression",
      "_databricks_automl.source_gui": false,
      "_databricks_automl.start_time": 1684694075,
      "_databricks_automl.state": "SUCCESS",
      "_databricks_automl.table_name": "global_temp.automl_86e5f35f_b868_4986_9118_aaa43d5ee6d9",
      "_databricks_automl.target_col": "quality",
      "_databricks_automl.timeout_minutes": 5,
      "mlflow.ownerId": 4566812440727830,
      "mlflow.experiment.sourceName": "/Users/andre@mycompany.com/experiments/automl/AutoML_Wine_2023_05_21_a",
      "mlflow.ownerEmail": "andre@mycompany.com",
      "mlflow.experimentType": "MLFLOW_EXPERIMENT"
    },
    "_creation_time": "2023-05-21 18:34:20",
    "_last_update_time": "2023-05-21 18:39:40",
    "_tracking_uri": "databricks://e2_demo",
    "_web_ui_link": "https://e2-demo-west.cloud.databricks.com#mlflow/experiments/536189130327910",
    "_api_link": "https://e2-demo-west.cloud.databricks.com/api/2.0/mlflow/experiments/get?experiment_id=536189130327910",
    "permissions": {
      "permission_levels": [
        {
          "permission_level": "CAN_READ",
          "description": "Can view the experiment"
        },
        {
          "permission_level": "CAN_EDIT",
          "description": "Can view, log runs, and edit the experiment"
        },
        {
          "permission_level": "CAN_MANAGE",
          "description": "Can view, log runs, edit, delete, and change permissions of the experiment"
        }
      ],
      "permissions": {
        "object_id": "/experiments/536189130327910",
        "object_type": "mlflowExperiment",
        "access_control_list": [
          {
            "user_name": "andre@mycompany.com",
            "display_name": "Andre",
            "all_permissions": [
              {
                "permission_level": "CAN_MANAGE",
                "inherited": true,
                "inherited_from_object": [
                  "/directories/767933989557963"
                ]
              }
            ]
          },
          {
            "service_principal_name": "038455d4-e5ec-4544-b6cf-64d55b91fee1",
            "display_name": "feifei-service-principal-e2-demo-west-ws-do-not-delete",
            "all_permissions": [
              {
                "permission_level": "CAN_MANAGE",
                "inherited": true,
                "inherited_from_object": [
                  "/directories/"
                ]
              }
            ]
          },
          {
            "group_name": "admins",
            "all_permissions": [
              {
                "permission_level": "CAN_MANAGE",
                "inherited": true,
                "inherited_from_object": [
                  "/directories/"
                ]
              }
            ]
          }
        ]
      }
    }
  },
  "registered_model": {
    "name": "AutoML_Wine_2023_05_21",
    "creation_timestamp": 1688280673949,
    "last_updated_timestamp": 1688280860424,
    "user_id": "andre@mycompany.com",
    "id": "8ee59f96ec7e44f1af766542c79435fe",
    "permission_level": "CAN_MANAGE",
    "tags": {},
    "_creation_timestamp": "2023-07-02 06:51:14",
    "_last_updated_timestamp": "2023-07-02 06:54:20",
    "_web_ui_link": "https://e2-demo-west.cloud.databricks.com#mlflow/models/AutoML_Wine_2023_05_21",
    "_api_link": "https://e2-demo-west.cloud.databricks.com/api/2.0/mlflow/registered-models/get?name=AutoML_Wine_2023_05_21",
    "permissions": {
      "permission_levels": [
        {
          "permission_level": "CAN_READ",
          "description": "Can view the details of the registered model and its model versions, and use the model versions."
        },
        {
          "permission_level": "CAN_EDIT",
          "description": "Can view and edit the details of a registered model and its model versions (except stage changes), and add new model versions."
        },
        {
          "permission_level": "CAN_MANAGE_STAGING_VERSIONS",
          "description": "Can view and edit the details of a registered model and its model versions, add new model versions, and manage stage transitions between non-Production stages."
        },
        {
          "permission_level": "CAN_MANAGE_PRODUCTION_VERSIONS",
          "description": "Can view and edit the details of a registered model and its model versions, add new model versions, and manage stage transitions between any stages."
        },
        {
          "permission_level": "CAN_MANAGE",
          "description": "Can manage permissions on, view all details of, and perform all actions on the registered model and its model versions."
        }
      ],
      "permissions": {
        "object_id": "/registered-models/8ee59f96ec7e44f1af766542c79435fe",
        "object_type": "registered-model",
        "access_control_list": [
          {
            "user_name": "andre@mycompany.com",
            "display_name": "Andre",
            "all_permissions": [
              {
                "permission_level": "CAN_MANAGE",
                "inherited": false
              }
            ]
          },
          {
            "group_name": "admins",
            "all_permissions": [
              {
                "permission_level": "CAN_MANAGE",
                "inherited": true,
                "inherited_from_object": [
                  "/registered-models/"
                ]
              }
            ]
          },
          {
            "group_name": "users",
            "all_permissions": [
              {
                "permission_level": "CAN_MANAGE",
                "inherited": true,
                "inherited_from_object": [
                  "/registered-models/"
                ]
              }
            ]
          },
          {
            "service_principal_name": "038455d4-e5ec-4544-b6cf-64d55b91fee1",
            "display_name": "feifei-service-principal-e2-demo-west-ws-do-not-delete",
            "all_permissions": [
              {
                "permission_level": "CAN_MANAGE",
                "inherited": true,
                "inherited_from_object": [
                  "/registered-models/"
                ]
              }
            ]
          }
        ]
      }
    }
  },
  "model_version": {
    "name": "AutoML_Wine_2023_05_21",
    "version": "1",
    "creation_timestamp": 1688280674258,
    "last_updated_timestamp": 1688280860424,
    "user_id": "andre@mycompany.com",
    "current_stage": "Production",
    "source": "dbfs:/databricks/mlflow-tracking/536189130327910/5249e62f29a244ecb86126951ab1db99/artifacts/model",
    "run_id": "5249e62f29a244ecb86126951ab1db99",
    "status": "READY",
    "_creation_timestamp": "2023-07-02 06:51:14",
    "_last_updated_timestamp": "2023-07-02 06:54:20",
    "_reg_model_download_uri": "dbfs:/databricks/mlflow-registry/54c5eca441e2494bbe5284ec12202d3a/models/model",
    "_run_model_download_uri": "dbfs:/databricks/mlflow-tracking/536189130327910/5249e62f29a244ecb86126951ab1db99/artifacts/model",
    "_web_ui_link": "https://e2-demo-west.cloud.databricks.com#mlflow/models/AutoML_Wine_2023_05_21/versions/1",
    "_api_link": "https://e2-demo-west.cloud.databricks.com/api/2.0/mlflow/model-versions/get?name=AutoML_Wine_2023_05_21&version=1"
  }
}
